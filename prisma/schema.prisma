generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tag {
  id       String @id @default(cuid())
  name     String
  color    String @default("#000000")
  author   User   @relation(name: "AuthoredTags", fields: [authorId], references: [id])
  authorId String
  pages    Page[]
}

model Page {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?  @db.Text
  content     String   @db.Text
  author      User     @relation(name: "AuthoredPages", fields: [authorId], references: [id])
  authorId    String
  starredBy   User[]   @relation("StarredPages")
  isPrivate   Boolean  @default(false)
  tags        Tag[]
}

model User {
  id            String    @id @default(cuid())
  name          String
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  image         String?
  isPrivate     Boolean   @default(false)
  accounts      Account[]
  sessions      Session[]
  authoredTags  Tag[]     @relation("AuthoredTags")
  authoredPages Page[]    @relation("AuthoredPages")
  starredPages  Page[]    @relation("StarredPages")
  followedBy    User[]    @relation("UserFollows")
  following     User[]    @relation("UserFollows")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
